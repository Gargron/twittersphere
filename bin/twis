#!/usr/bin/env ruby
require 'rubygems'
require 'bundler/setup'
require 'thor'
require 'dotenv'

Dotenv.load

require_relative '../lib/twittersphere'

class App < Thor
  class_option :max_depth, aliases: "-d", desc: "Max depth of search", default: 2, type: :numeric
  class_option :max_friends, aliases: "-f", desc: "Max friends of friends stored", default: 300, type: :numeric

  desc "fetch USERNAME", "fetch users and followers from Twitter"

  def fetch(name)
    client(name, options).run
  end

  desc "inspect", "display user store"

  def inspect
    p client(nil, options).user_store
  end

  desc "process USERNAME", "generate graph edges from data"

  def process(name)
    tp    = Twittersphere::Processor.new(client(name, options))
    edges = tp.run

    str  = "nodedef> name VARCHAR, label VARCHAR, followers INT\n"
    done = {}

    edges.each do |edge|
      edge.each do |node|
        next if done.has_key? node.user_id
        str << "#{node.user_id},#{node.name},#{node.weight}\n"
        done[node.user_id] = true
      end
    end

    str << "edgedef> user VARCHAR, friend VARCHAR\n"

    edges.each do |edge|
      str << "#{edge[0].user_id},#{edge[1].user_id}\n"
    end

    File.open('./output.gdf', 'w') { |f| f.print str }
  end

  private

  def client(name, options)
    Twittersphere::Client.new(name, options[:max_depth], options[:max_friends])
  end
end

App.start(ARGV)
